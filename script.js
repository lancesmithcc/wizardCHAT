document.addEventListener('DOMContentLoaded', () => {
    const micButton = document.getElementById('mic-button');
    const wizardAscii = document.getElementById('wizard-ascii');
    const chatInput = document.getElementById('chat-input');
    const sendButton = document.getElementById('send-button');
    const userChatLog = document.getElementById('user-chat-log');
    const wizardSpeechBubble = document.getElementById('wizard-speech-bubble');
    const vibrationalSymbols = document.querySelector('.vibrational-symbols');
    const astrologicalWheel = document.querySelector('.astrological-wheel');

    let mediaRecorder;
    let audioChunks = [];
    let isRecording = false;
    let recordingTimeout;
    let backgroundMusic = null;
    let musicStarted = false;

    // Massively expanded vibrational symbol arrays with HTML entities and mystical symbols
    const positiveSymbols = [
        // Celestial & Light
        '‚òÄÔ∏è', 'üåü', '‚ú®', 'üí´', '‚≠ê', 'üåô', 'üåû', 'üåõ', 'üåú', 'üåù', 'üåö', 'üå†', '‚òÑÔ∏è', 'üí•',
        // Mystical & Spiritual Religious
        'üíé', 'üîÆ', 'üïâÔ∏è', '‚òØÔ∏è', 'üôè', '‚úùÔ∏è', '‚ò™Ô∏è', 'üîØ', '‚òÆÔ∏è', 'üïé', '‚öõÔ∏è', 'üßø', 'üìø', '‚õ©Ô∏è',
        'üïØÔ∏è', 'üî•', 'üëº', 'üòá', 'üßò', 'ü§≤', 'üõê', '‚ò¶Ô∏è', '‚úû', '‚úü', '‚ú†', '‚ú°', '‚ò¨', '‚ò∏', 'üî±',
        // Astrology (zodiac signs now in permanent wheel)
        '‚õé', // Ophiuchus (13th sign)
        // Nature & Life Magic
        'üåà', 'ü¶ã', 'üïäÔ∏è', 'üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ', 'üçÄ', 'üåø', 'üå±', 'üåµ', 'üåæ',
        'üå≥', 'üå≤', 'üå¥', 'üçÉ', 'ü¶¢', 'üêù', 'ü¶Ñ', 'üßö', 'üßú', 'ü¶Ö', 'ü¶Ü', 'üêö', 'ü™∑',
        'üåä', 'üíß', 'üí¶', 'ü´ß', 'üå™Ô∏è', 'üå¨Ô∏è', '‚òÅÔ∏è', '‚õÖ', 'üå§Ô∏è', '‚õàÔ∏è', 'üå©Ô∏è', 'üå¶Ô∏è',
        // Sacred Geometry & Mystical Symbols
        '‚ù§Ô∏è', 'üíö', 'üíú', 'üíô', 'ü§ç', 'üíõ', 'üß°', '‚úÖ', '‚ûï', 'üëç', 'üôå', 'ü§ù', 'üëè',
        'üõ°Ô∏è', 'üëë', 'üí∞', 'üé≠', 'üé®', 'üé™', 'üéØ', 'üèÜ', 'üéñÔ∏è', 'ü•á', 'üèÖ', 'üìú', 'üóùÔ∏è',
        // Angels & Divine Beings
        'üëº', 'üòá', 'üßö‚Äç‚ôÄÔ∏è', 'üßö‚Äç‚ôÇÔ∏è', 'üßû‚Äç‚ôÄÔ∏è', 'üßû‚Äç‚ôÇÔ∏è', 'ü¶Ñ', 'üêâ', 'ü¶Ö', 'üïäÔ∏è',
        // Crystals & Gems
        'üíé', 'üíç', 'üíí', 'üîÆ', '‚≠ê', 'üåü', '‚ú®', 'üí´', 'üå†',
        // Sacred Tools & Objects
        'üîÆ', 'üïØÔ∏è', 'üìø', 'üßø', 'ü™¨', 'üé≠', 'üé™', 'üé®', 'üéº', 'üéµ', 'üé∂', 'üé§',
        // Positive Energy Symbols
        '‚àû', '‚òÜ', '‚òÖ', '‚ú¶', '‚úß', '‚ú©', '‚ú™', '‚ú´', '‚ú¨', '‚ú≠', '‚úÆ', '‚úØ', '‚ú∞', '‚ú±', '‚ú≤', '‚ú≥',
        '‚ú¥', '‚úµ', '‚ú∂', '‚ú∑', '‚ú∏', '‚úπ', '‚ú∫', '‚úª', '‚úº', '‚úΩ', '‚úæ', '‚úø', '‚ùÄ', '‚ùÅ', '‚ùÇ', '‚ùÉ',
        '‚ùÑ', '‚ùÖ', '‚ùÜ', '‚ùá', '‚ùà', '‚ùâ', '‚ùä', '‚ùã', '‚ùå', '‚ùç', '‚ùé', '‚ùè', '‚ùê', '‚ùë', '‚ùí',
        // Sacred Geometry
        '‚óä', '‚óà', '‚óâ', '‚óã', '‚óè', '‚óå', '‚óç', '‚óé', '‚óê', '‚óë', '‚óí', '‚óì', '‚óî', '‚óï', '‚óñ', '‚óó',
        '‚óò', '‚óô', '‚óö', '‚óõ', '‚óú', '‚óù', '‚óû', '‚óü', '‚ó†', '‚ó°', '‚ó¢', '‚ó£', '‚ó§', '‚ó•', '‚ó¶', '‚óß',
        // Card Suits & Mystical
        '‚ô†', '‚ô£', '‚ô•', '‚ô¶', '‚ô°', '‚ô¢', '‚ôß', '‚ô§', '‚ôö', '‚ôõ', '‚ôú', '‚ôù', '‚ôû', '‚ôü',
        // Misc Magical
        '‚ö°', '‚öú', '‚ùÖ', '‚ùÜ', 'üîÜ', 'üîÖ', 'üí°', 'üïØÔ∏è', 'ü™î', 'üéÜ', 'üéá', 'üåÄ', 'üí´',
        // Ancient & Runic
        '·öõ', '·öú', '·öÅ', '·öÇ', '·öÉ', '·öÑ', '·öÖ', '·öÜ', '·öá', '·öà', '·öâ', '·öä', '·öã', '·öå', '·öç', '·öé',
        '‚öπ', '‚ö∫', '‚öª', '‚öº', '‚öΩ', '‚öæ', '‚öø', '‚õÄ', '‚õÅ', '‚õÇ', '‚õÉ'
    ];

    const negativeSymbols = [
        // Death & Darkness
        'üíÄ', '‚ò†Ô∏è', 'üëπ', 'üë∫', 'üëø', 'üòà', 'üßü', 'ü¶á', 'üï∑Ô∏è', 'üêç', 'ü¶Ç', 'üíÄ', '‚ö∞Ô∏è', '‚ö±Ô∏è',
        'üî•', 'üí•', '‚ö°', 'üå™Ô∏è', '‚òÑÔ∏è', 'üí´', 'üåä', 'üåã', 'üó≤', '‚öá', '‚öà', '‚öâ',
        // Dark Creatures & Monsters
        'üëæ', 'üëª', 'üò±', 'ü§°', 'üßå', 'üßõ', 'üßü‚Äç‚ôÄÔ∏è', 'üßü‚Äç‚ôÇÔ∏è', 'ü¶à', 'üêô', 'üï∏Ô∏è', 'ü¶ü', 'ü™∞',
        'üêÄ', 'üê∫', 'ü¶ò', 'ü¶ó', 'ü™≤', 'ü¶†', 'üß¨', 'ü¶π', 'ü¶∏‚Äç‚ôÇÔ∏è', 'ü¶∏‚Äç‚ôÄÔ∏è', 'ü§ñ',
        // Negative Emotions & Faces
        'üíî', 'üòµ', 'üò∞', 'üò±', 'ü§Æ', 'üò≠', 'üò¢', 'üò§', 'üò°', 'ü§¨', 'üò†', 'üòæ', 'üôÑ',
        'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢',
        // Destruction & Chaos
        'üí£', 'üí•', '‚ö°', 'üå™Ô∏è', 'üåä', 'üî•', '‚ö†Ô∏è', 'üÜò', '‚ò¢Ô∏è', '‚ò£Ô∏è', '‚õàÔ∏è', 'üå©Ô∏è',
        'üíÄ', '‚öîÔ∏è', 'üó°Ô∏è', 'üî™', 'ü™ì', '‚öíÔ∏è', 'üî®', 'üí£', 'üß®', 'üí•', '‚ö∞Ô∏è', '‚ö±Ô∏è',
        // Dark Weather & Elements
        '‚òÅÔ∏è', 'üåßÔ∏è', '‚õàÔ∏è', 'üå©Ô∏è', '‚ùÑÔ∏è', 'üßä', 'üå´Ô∏è', 'üåÄ', 'üí®', '‚õÖ', 'üåë', 'üåí',
        'üåì', 'üåî', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåö', 'üåù', 'üåõ', 'üåú',
        // Rejection & Negation
        '‚ùå', '‚ûñ', 'üö´', '‚õî', 'üî¥', 'üëé', 'üìâ', 'üí∏', 'üóëÔ∏è', 'üöÆ', 'üöØ', 'üö±',
        'üö≥', 'üö∑', 'üö∏', '‚ö†Ô∏è', '‚ò†Ô∏è', '‚ö∞Ô∏è', '‚ö±Ô∏è', 'üîá', 'üîï', 'üì¥', 'üíî',
        // Dark Symbols & Entities
        '‚úñ', '‚úó', '‚úò', '‚õå', '‚õç', '‚õé', '‚õè', '‚öí', '‚öì', '‚ö∞', '‚ö±', '‚ö†', '‚ò†',
        '‚ò¢', '‚ò£', '‚ö°', '‚ö†', '‚ò°', '‚öû', '‚öü', '‚ö†', '‚ö°', '‚ö¢', '‚ö£', '‚ö§', '‚ö•',
        // Dark Geometry
        '‚óê', '‚óë', '‚óí', '‚óì', '‚óî', '‚óï', '‚óñ', '‚óó', '‚óò', '‚óô', '‚óö', '‚óõ', '‚óú', '‚óù',
        '‚óû', '‚óü', '‚ó†', '‚ó°', '‚ó¢', '‚ó£', '‚ó§', '‚ó•', '‚ó¶', '‚óß', '‚ó®', '‚ó©', '‚ó™', '‚ó´',
        '‚ñ≤', '‚ñº', '‚óÜ', '‚óá', '‚ñ†', '‚ñ°', '‚ñ™', '‚ñ´', '‚ñ¨', '‚ñ≠', '‚ñÆ', '‚ñØ', '‚ñ∞', '‚ñ±',
        '‚ñ≤', '‚ñº', '‚ñ∂', '‚óÄ', '‚ñ¥', '‚ñæ', '‚ñ∏', '‚óÇ', '‚ñµ', '‚ñø', '‚ñπ', '‚óÉ', '‚ñ≥', '‚ñΩ',
        // Dark Ancient & Cursed
        '·öõ', '·öú', '·ö†', '·ö°', '·ö¢', '·ö£', '·ö§', '·ö•', '·ö¶', '·öß', '·ö®', '·ö©', '·ö™', '·ö´', '·ö¨', '·ö≠',
        '‚õ§', '‚õ•', '‚õ¶', '‚õß', '‚õ®', '‚õ©', '‚õ™', '‚õ´', '‚õ¨', '‚õ≠', '‚õÆ', '‚õØ', '‚õ∞', '‚õ±', '‚õ≤', '‚õ≥',
        // Misc Dark & Cursed
        'üï≥Ô∏è', '‚ö´', '‚¨õ', '‚óºÔ∏è', '‚ñ™Ô∏è', 'üî≥', '‚óæ', '‚óº', '‚ñ™', '‚ñ´', '‚¨ú', '‚óΩ', '‚óª', '‚ñ´Ô∏è',
        'üíÄ', '‚ò†', '‚ö∞', '‚ö±', 'üóø', 'ü™¶', '‚ö°', '‚õà', 'üå™', 'üåä', 'üî•', 'üí•', 'üí£',
        'üëÅÔ∏è', 'üßø', 'üëÅÔ∏è‚Äçüó®Ô∏è', 'üîÆ', 'üåë', 'üåí', 'üåì', 'üåî', 'üåï', 'üåñ', 'üåó', 'üåò'
    ];

    // Vibrational analysis function
    function analyzeVibrationalEnergy(text) {
        const lowerText = text.toLowerCase();
        
        // Positive keywords
        const positiveWords = [
            'love', 'peace', 'joy', 'light', 'gratitude', 'blessed', 'amazing', 'beautiful', 
            'wonderful', 'fantastic', 'awesome', 'grateful', 'happy', 'enlightened', 
            'spiritual', 'divine', 'sacred', 'healing', 'wisdom', 'transcend', 'manifest',
            'abundance', 'prosperity', 'harmony', 'unity', 'compassion', 'kindness',
            'hope', 'faith', 'trust', 'believe', 'inspire', 'magic', 'miracle',
            'soul', 'spirit', 'energy', 'vibration', 'frequency', 'consciousness',
            'meditation', 'zen', 'namaste', 'blessed', 'thank', 'appreciate'
        ];
        
        // Negative keywords  
        const negativeWords = [
            'hate', 'anger', 'fear', 'dark', 'evil', 'terrible', 'awful', 'horrible',
            'sad', 'depressed', 'anxious', 'worried', 'stressed', 'frustrated',
            'angry', 'mad', 'furious', 'disgusted', 'sick', 'tired', 'exhausted',
            'broken', 'hurt', 'pain', 'suffering', 'misery', 'despair', 'hopeless',
            'worthless', 'useless', 'failure', 'disaster', 'nightmare', 'curse',
            'damn', 'hell', 'devil', 'toxic', 'poison', 'disease', 'death',
            'destroy', 'kill', 'murder', 'violence', 'war', 'fight', 'attack'
        ];
        
        let positiveScore = 0;
        let negativeScore = 0;
        
        positiveWords.forEach(word => {
            if (lowerText.includes(word)) positiveScore++;
        });
        
        negativeWords.forEach(word => {
            if (lowerText.includes(word)) negativeScore++;
        });
        
        // Return vibrational level (-3 to +3)
        return Math.max(-3, Math.min(3, positiveScore - negativeScore));
    }

    // Vibrational color mapping - subtly perceptible
    const vibrationalColors = {
        // Highly positive (love, spiritual, transcendent) - subtle but visible
        3: '#2a1535',  // Subtle purple for highest vibration
        2: '#1f1a35',  // Subtle blue-purple  
        1: '#1a2035',  // Subtle blue tint
        0: '#000000',  // Black for neutral
        '-1': '#352015', // Subtle orange tint
        '-2': '#351515', // Subtle red tint
        '-3': '#350a0a'  // More noticeable red tint
    };

    // Astrological positions for zodiac symbols (12 positions around a circle)
    const zodiacPositions = {
        '‚ôà': { angle: 0 },    // Aries - East
        '‚ôâ': { angle: 30 },   // Taurus
        '‚ôä': { angle: 60 },   // Gemini
        '‚ôã': { angle: 90 },   // Cancer - North
        '‚ôå': { angle: 120 },  // Leo
        '‚ôç': { angle: 150 },  // Virgo
        '‚ôé': { angle: 180 },  // Libra - West
        '‚ôè': { angle: 210 },  // Scorpio
        '‚ôê': { angle: 240 },  // Sagittarius
        '‚ôë': { angle: 270 },  // Capricorn - South
        '‚ôí': { angle: 300 },  // Aquarius
        '‚ôì': { angle: 330 }   // Pisces
    };

    // Advanced vibrational analysis with subtle color themes
    function getVibrationalColor(vibrationalLevel, messageText) {
        const lowerText = messageText.toLowerCase();
        
        // Check for specific high-vibe themes - subtly perceptible
        if (lowerText.includes('love') || lowerText.includes('divine') || lowerText.includes('blessed')) {
            return '#35152a'; // Subtle pink tint
        }
        if (lowerText.includes('spiritual') || lowerText.includes('sacred') || lowerText.includes('enlighten')) {
            return '#251535'; // Subtle purple tint
        }
        if (lowerText.includes('peace') || lowerText.includes('harmony') || lowerText.includes('zen')) {
            return '#152535'; // Subtle cyan tint
        }
        if (lowerText.includes('joy') || lowerText.includes('happy') || lowerText.includes('celebrate')) {
            return '#353515'; // Subtle yellow tint
        }
        if (lowerText.includes('gratitude') || lowerText.includes('thank') || lowerText.includes('appreciate')) {
            return '#153515'; // Subtle green tint
        }
        
        // Check for specific low-vibe themes - subtly perceptible
        if (lowerText.includes('hate') || lowerText.includes('evil') || lowerText.includes('curse')) {
            return '#350a0a'; // Subtle dark red
        }
        if (lowerText.includes('fear') || lowerText.includes('terror') || lowerText.includes('nightmare')) {
            return '#151515'; // Subtle dark gray
        }
        if (lowerText.includes('anger') || lowerText.includes('rage') || lowerText.includes('furious')) {
            return '#351010'; // Subtle red tint
        }
        
        // Default to vibrational level color
        return vibrationalColors[vibrationalLevel.toString()] || '#000000';
    }

    // Set background vibe color and start pulsing
    function setVibrationalBackground(vibrationalLevel, messageText) {
        const vibeColor = getVibrationalColor(vibrationalLevel, messageText);
        
        // Set CSS custom property for the vibe color
        document.documentElement.style.setProperty('--vibe-color', vibeColor);
        
        // Add pulsing class to body
        document.body.classList.add('vibrational-pulse');
        
        // Remove any existing timeout
        if (window.vibrationalTimeout) {
            clearTimeout(window.vibrationalTimeout);
        }
    }

    // Clear vibrational background
    function clearVibrationalBackground() {
        document.body.classList.remove('vibrational-pulse');
        document.documentElement.style.setProperty('--vibe-color', '#000000');
    }

    // Create permanent astrological wheel
    function createAstrologicalWheel() {
        if (!astrologicalWheel) return;
        
        // HTML entity zodiac symbols with correct codes
        const zodiacSigns = ['&#9801;', '&#9802;', '&#9803;', '&#9804;', '&#9805;', '&#9806;', '&#9807;', '&#9808;', '&#9809;', '&#9810;', '&#9811;', '&#9812;'];
        
        zodiacSigns.forEach((sign, index) => {
            const symbol = document.createElement('div');
            symbol.className = 'zodiac-symbol';
            symbol.innerHTML = sign; // Use innerHTML for HTML entities
            
            const angle = index * 30; // 30 degrees apart
            const radius = 45; // 45% of container
            const angleRad = (angle * Math.PI) / 180;
            
            const x = 50 + radius * Math.cos(angleRad);
            const y = 50 + radius * Math.sin(angleRad);
            
            symbol.style.left = x + '%';
            symbol.style.top = y + '%';
            
            astrologicalWheel.appendChild(symbol);
        });
    }

    // Get thematically appropriate symbols based on message content
    function getThematicSymbols(messageText, isPositive) {
        const lowerText = messageText.toLowerCase();
        
        if (isPositive) {
            // Love & relationships
            if (lowerText.includes('love') || lowerText.includes('heart') || lowerText.includes('romance')) {
                return ['‚ù§Ô∏è', 'üíö', 'üíú', 'üíô', 'üíõ', 'üß°', 'üíï', 'üíñ', 'üíó', 'üíò', 'üíù', 'üíû', 'üíü', '‚ô•', '‚ô°'];
            }
            // Spiritual & divine
            if (lowerText.includes('spiritual') || lowerText.includes('divine') || lowerText.includes('sacred') || lowerText.includes('god')) {
                return ['üïâÔ∏è', '‚òØÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', 'üîØ', '‚òÆÔ∏è', 'üïé', '‚öõÔ∏è', 'üôè', 'üßø', 'üìø', '‚õ©Ô∏è', 'üïØÔ∏è', 'üëº', 'üòá'];
            }
            // Nature & life
            if (lowerText.includes('nature') || lowerText.includes('earth') || lowerText.includes('life') || lowerText.includes('grow')) {
                return ['üå±', 'üåø', 'üçÄ', 'üå≥', 'üå≤', 'üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ', 'ü¶ã', 'üêù', 'üåà', '‚òÄÔ∏è', 'üåô'];
            }
            // Joy & celebration
            if (lowerText.includes('joy') || lowerText.includes('happy') || lowerText.includes('celebrate') || lowerText.includes('party')) {
                return ['üéâ', 'üéä', 'ü•≥', 'üéà', 'üéÜ', 'üéá', '‚ú®', 'üåü', '‚≠ê', 'üí´', 'üé≠', 'üé™', 'üé®', 'üéµ', 'üé∂'];
            }
            // Peace & harmony
            if (lowerText.includes('peace') || lowerText.includes('calm') || lowerText.includes('harmony') || lowerText.includes('zen')) {
                return ['‚òÆÔ∏è', 'üïäÔ∏è', 'üßò', '‚òØÔ∏è', 'üå∏', 'ü™∑', 'üíô', 'üåä', 'üíß', 'üåô', '‚≠ê', '‚ú®', 'üïØÔ∏è', 'ü§≤'];
            }
            // Success & achievement
            if (lowerText.includes('success') || lowerText.includes('win') || lowerText.includes('achieve') || lowerText.includes('goal')) {
                return ['üèÜ', 'ü•á', 'üéñÔ∏è', 'üèÖ', 'üëë', 'üí∞', 'üíé', '‚≠ê', 'üåü', '‚ú®', 'üéØ', 'üéâ', 'üôå', 'üëç'];
            }
        } else {
            // Fear & anxiety
            if (lowerText.includes('fear') || lowerText.includes('scared') || lowerText.includes('anxiety') || lowerText.includes('worry')) {
                return ['üò∞', 'üò±', 'üò®', 'üåö', 'üåë', '‚òÅÔ∏è', 'üåßÔ∏è', '‚õàÔ∏è', 'üå™Ô∏è', 'üíÄ', 'üëª', 'ü¶á', 'üï∑Ô∏è', 'üîí'];
            }
            // Anger & rage
            if (lowerText.includes('anger') || lowerText.includes('mad') || lowerText.includes('rage') || lowerText.includes('furious')) {
                return ['üò°', 'ü§¨', 'üò†', 'üí¢', 'üí•', 'üî•', '‚ö°', 'üí£', 'üåã', 'üó≤', '‚öîÔ∏è', 'üó°Ô∏è', '‚ñ≤', '‚ñº'];
            }
            // Death & darkness
            if (lowerText.includes('death') || lowerText.includes('die') || lowerText.includes('dark') || lowerText.includes('evil')) {
                return ['üíÄ', '‚ò†Ô∏è', '‚ö∞Ô∏è', '‚ö±Ô∏è', 'üñ§', 'üåë', 'üåí', 'üåö', 'ü¶á', 'üï∑Ô∏è', 'üêç', 'üëπ', 'üë∫', 'üòà'];
            }
            // Sadness & depression
            if (lowerText.includes('sad') || lowerText.includes('depressed') || lowerText.includes('cry') || lowerText.includes('hurt')) {
                return ['üò¢', 'üò≠', 'üíî', 'üòû', 'üòî', '‚òî', 'üåßÔ∏è', '‚òÅÔ∏è', 'üå´Ô∏è', 'üíß', 'ü•Ä', 'üñ§', '‚óºÔ∏è', '‚ñ™Ô∏è'];
            }
            // Destruction & chaos
            if (lowerText.includes('destroy') || lowerText.includes('break') || lowerText.includes('chaos') || lowerText.includes('war')) {
                return ['üí•', 'üí£', 'üß®', '‚ö°', 'üî•', 'üå™Ô∏è', 'üåä', '‚öîÔ∏è', 'üó°Ô∏è', 'üî™', 'üíÄ', '‚ò†Ô∏è', '‚ö†Ô∏è', 'üÜò'];
            }
        }
        
        // Return general positive or negative symbols if no theme matches
        return isPositive ? positiveSymbols : negativeSymbols;
    }

    // Clear existing symbols
    function clearVibrationalSymbols() {
        if (!vibrationalSymbols) return;
        vibrationalSymbols.innerHTML = '';
    }

    // Spawn magical symbols (now persist until next query)
    function spawnVibrationalSymbols(vibrationalLevel, messageLength, messageText) {
        if (!vibrationalSymbols) return;
        
        // Clear previous symbols first
        clearVibrationalSymbols();
        
        const isPositive = vibrationalLevel > 0;
        const intensity = Math.abs(vibrationalLevel);
        // Increase symbol count significantly
        const symbolCount = Math.min(20, Math.max(3, (intensity * 4) + Math.floor(messageLength / 15)));
        
        // Get thematically appropriate symbols for this message
        const thematicSymbols = getThematicSymbols(messageText, isPositive);
        
        for (let i = 0; i < symbolCount; i++) {
            setTimeout(() => {
                const symbol = document.createElement('div');
                symbol.className = `vibrational-symbol ${isPositive ? 'positive' : 'negative'}`;
                
                // Choose from thematic symbols (70% chance) or general symbols (30% chance)
                const useThematic = Math.random() < 0.7;
                const symbolArray = useThematic ? thematicSymbols : (isPositive ? positiveSymbols : negativeSymbols);
                const chosenSymbol = symbolArray[Math.floor(Math.random() * symbolArray.length)];
                symbol.textContent = chosenSymbol;
                
                // Random position (zodiac symbols are now permanent in the wheel)
                symbol.style.left = Math.random() * (window.innerWidth - 100) + 50 + 'px';
                symbol.style.top = Math.random() * (window.innerHeight - 100) + 50 + 'px';
                
                // Vary size based on intensity and randomness
                const size = 18 + (intensity * 6) + Math.random() * 20;
                symbol.style.fontSize = size + 'px';
                
                // Add random delay to pulsing animation
                symbol.style.animationDelay = Math.random() * 2 + 's';
                
                vibrationalSymbols.appendChild(symbol);
                
                // Symbols now persist until next query (no automatic removal)
            }, i * 150); // Faster stagger
        }
    }

    // Initialize background music
    function initializeBackgroundMusic() {
        backgroundMusic = new Audio('./wizardry.mp3');
        backgroundMusic.loop = true;
        backgroundMusic.volume = 0.3; // 30% volume
        
        // Handle loading events
        backgroundMusic.onloadstart = () => console.log('Background music loading started');
        backgroundMusic.oncanplay = () => console.log('Background music ready to play');
        backgroundMusic.onerror = (e) => console.error('Background music error:', e);
        
        console.log("Background music initialized");
    }

    // Start background music (called after first query)
    function startBackgroundMusic() {
        if (!musicStarted && backgroundMusic) {
            backgroundMusic.play().then(() => {
                console.log("Background music started");
                musicStarted = true;
            }).catch(err => {
                console.error("Error starting background music:", err);
            });
        }
    }

    function initializeMicrophone() {
        console.log("Initializing microphone functionality...");
        
        if (micButton) {
            micButton.disabled = false;
            micButton.addEventListener('click', handleMicButtonClick);
            console.log("Microphone button ready");
        } else {
            console.error("Microphone button not found");
        }
    }

    function toggleWizardSpeaking(isSpeaking) {
        if (isSpeaking) {
            wizardAscii.classList.add('speaking');
        } else {
            wizardAscii.classList.remove('speaking');
        }
    }

    async function speakWizardResponse(text) {
        try {
            console.log('Requesting TTS for text:', text);
            const response = await fetch('/.netlify/functions/fal-kokoro-tts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text: text }),
            });

            console.log('TTS response status:', response.status);
            
            if (response.ok) {
                const data = await response.json();
                console.log('TTS response data:', data);
                
                if (data.audioUrl) {
                    console.log('Playing audio from URL:', data.audioUrl);
                    const audio = new Audio(data.audioUrl);
                    audio.volume = 1.0; // 100% volume for Kokoro voice
                    
                    audio.onloadstart = () => console.log('Audio loading started');
                    audio.oncanplay = () => console.log('Audio can start playing');
                    audio.onplay = () => console.log('Audio playback started');
                    audio.onended = () => console.log('Audio playback ended');
                    audio.onerror = (e) => console.error('Audio error:', e);
                    
                    audio.play().catch(err => {
                        console.error("Error playing TTS audio:", err);
                        appendMessage("The wizard's voice echoes only in silence (audio playback failed).", "wizard-message error");
                    });
                } else {
                    console.error("No audioUrl in TTS response");
                }
            } else {
                console.error("TTS request failed:", response.status);
                const errorData = await response.text();
                console.error("TTS error details:", errorData);
            }
        } catch (error) {
            console.error("Error with TTS:", error);
        }
    }

    function displayWizardResponse(text, isError = false) {
        if (!wizardSpeechBubble) {
            console.error("Wizard speech bubble element not found!");
            appendMessage(text, isError ? 'wizard-message error' : 'wizard-message');
            return;
        }
        
        wizardSpeechBubble.textContent = text;
        if (isError) {
            wizardSpeechBubble.style.animation = 'none';
            wizardSpeechBubble.style.color = '#ff6b6b';
        } else {
            wizardSpeechBubble.style.animation = '';
            wizardSpeechBubble.style.color = '';
            speakWizardResponse(text);
        }
    }

    function appendMessage(text, className) {
        if (!userChatLog) {
            console.error("Chat log element not found! Cannot append message:", text);
            return;
        }
        const messageElement = document.createElement('p');
        messageElement.textContent = text;
        messageElement.className = className;
        userChatLog.appendChild(messageElement);
        userChatLog.scrollTop = userChatLog.scrollHeight;
        if (className.includes('error')) {
            messageElement.style.color = '#ff6b6b';
        }
    }

    async function handleMicButtonClick() {
        if (!isRecording) {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    audio: {
                        channelCount: 1,
                        sampleRate: 16000,
                        echoCancellation: true,
                        noiseSuppression: true
                    }
                });
                
                // Try to use a more compressed format
                const options = { mimeType: 'audio/webm;codecs=opus' };
                if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                    options.mimeType = 'audio/webm';
                }
                
                mediaRecorder = new MediaRecorder(stream, options);
                
                mediaRecorder.ondataavailable = event => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstart = () => {
                    console.log("Recording started");
                    chatInput.placeholder = "Listening... speak thy truth... (max 30s)";
                    if (micButton) micButton.classList.add('recording');
                    
                    // Auto-stop recording after 30 seconds
                    recordingTimeout = setTimeout(() => {
                        if (mediaRecorder && mediaRecorder.state === "recording") {
                            mediaRecorder.stop();
                        }
                    }, 30000);
                };

                mediaRecorder.onstop = async () => {
                    console.log("Recording stopped");
                    chatInput.placeholder = "Speak or type thy query...";
                    if (micButton) micButton.classList.remove('recording');
                    
                    // Clear the timeout
                    if (recordingTimeout) {
                        clearTimeout(recordingTimeout);
                        recordingTimeout = null;
                    }
                    
                    if (audioChunks.length === 0) {
                        console.log("No audio data captured.");
                        return;
                    }
                    
                    const audioBlob = new Blob(audioChunks, { type: options.mimeType || 'audio/webm' });
                    audioChunks = [];

                    // Check file size (limit to 10MB)
                    if (audioBlob.size > 10 * 1024 * 1024) {
                        appendMessage("The whispers are too voluminous for the ancient scrolls (audio too large). Try a shorter recording.", "wizard-message error");
                        return;
                    }

                    console.log(`Audio blob size: ${(audioBlob.size / 1024 / 1024).toFixed(2)} MB`);
                    appendMessage("[Processing thy whispers...]", "user-message dimmed");

                    try {
                        const audioDataUrl = await blobToDataUrl(audioBlob);
                        
                        const response = await fetch('/.netlify/functions/fal-whisper-stt', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ audioData: audioDataUrl }),
                        });

                        if (response.ok) {
                            const data = await response.json();
                            if (data.transcript) {
                                console.log("Transcript received:", data.transcript);
                                chatInput.value = data.transcript;
                                const processingMessage = Array.from(userChatLog.children).find(el => el.textContent === "[Processing thy whispers...]");
                                if (processingMessage) processingMessage.remove();
                                sendMessage();
                            } else {
                                console.error("No transcript in response:", data);
                                appendMessage("The oracle speaks in riddles unclear (no transcript received).", "wizard-message error");
                                const processingMessage = Array.from(userChatLog.children).find(el => el.textContent === "[Processing thy whispers...]");
                                if (processingMessage) processingMessage.remove();
                            }
                        } else {
                            const errorData = await response.json();
                            console.error("STT request failed:", errorData);
                            appendMessage(`The spirits of voice whisper secrets untold: ${errorData.error || 'STT failed'}`, "wizard-message error");
                            const processingMessage = Array.from(userChatLog.children).find(el => el.textContent === "[Processing thy whispers...]");
                            if (processingMessage) processingMessage.remove();
                        }

                    } catch (err) {
                        console.error("Error during STT call:", err);
                        appendMessage(`The spirits of voice are confused: ${err.message || 'STT Failed'}`, "wizard-message error");
                        const processingMessage = Array.from(userChatLog.children).find(el => el.textContent === "[Processing thy whispers...]");
                        if (processingMessage) processingMessage.remove();
                    }
                };

                mediaRecorder.start();
                isRecording = true;
                
            } catch (err) {
                console.error("Error accessing microphone:", err);
                appendMessage("The spirits of the airwaves are shy... (Cannot access microphone)", "wizard-message error");
            }
        } else {
            if (mediaRecorder && mediaRecorder.state === "recording") {
                mediaRecorder.stop();
            }
            if (recordingTimeout) {
                clearTimeout(recordingTimeout);
                recordingTimeout = null;
            }
            isRecording = false;
        }
    }

    async function sendMessage() {
        if (!chatInput) {
            console.error("Chat input not found in sendMessage");
            return;
        }

        const messageText = chatInput.value.trim();
        if (messageText) {
            // Analyze vibrational energy and spawn symbols
            const vibrationalLevel = analyzeVibrationalEnergy(messageText);
            spawnVibrationalSymbols(vibrationalLevel, messageText.length, messageText);
            
            // Set background color based on vibrational energy
            setVibrationalBackground(vibrationalLevel, messageText);
            
            // Start background music after first query
            if (!musicStarted) {
                startBackgroundMusic();
            }
            
            appendMessage(messageText, 'user-message');
            chatInput.value = '';
            toggleWizardSpeaking(true);

            try {
                const response = await fetch('/.netlify/functions/deepseek-chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: messageText }),
                });
                
                if (!response.ok) {
                    let errorData = { error: `Error from the mystic ether: ${response.status}` };
                    try {
                        const potentialErrorJson = await response.json();
                        if (potentialErrorJson && potentialErrorJson.error) {
                            errorData.error = potentialErrorJson.error;
                        }
                    } catch (e) {
                        console.warn("Could not parse error response as JSON.");
                    }
                    throw new Error(errorData.error);
                }
                
                const data = await response.json();
                if (data && data.reply) {
                    displayWizardResponse(data.reply);
                } else {
                    console.error("Invalid data structure from backend:", data);
                    displayWizardResponse("The wizard's words are jumbled (invalid response format)... perhaps a cosmic hiccup?", true);
                }
                
            } catch (error) {
                console.error('Failed to send message or get response:', error);
                displayWizardResponse(`Oh dear, a disturbance in the arcane flows! (${error.message})`, true);
            } finally {
                const speakDuration = wizardSpeechBubble && wizardSpeechBubble.textContent ? wizardSpeechBubble.textContent.length * 50 : 2000;
                setTimeout(() => toggleWizardSpeaking(false), Math.max(1000, speakDuration));
            }
        }
    }

    function blobToDataUrl(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(blob);
        });
    }

    if (sendButton) {
        sendButton.addEventListener('click', sendMessage);
    } else {
        console.error("Send button not found.");
    }
    
    if (chatInput) {
        chatInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });
    } else {
        console.error("Chat input not found.");
    }

    initializeMicrophone();
    createAstrologicalWheel();
    initializeBackgroundMusic();
});